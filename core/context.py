
# core/context.py
from __future__ import annotations

from dataclasses import dataclass, field, asdict
from typing import Any, Dict, List, Optional, Tuple, Literal
from pathlib import Path
from datetime import datetime
import uuid
import yaml



"""
===============================================================================
ARCHCode / mARCHCode ‚Äî PHASE 1 : Sp√©cification initiale
-------------------------------------------------------------------------------
R√¥le du module
  - D√©finir la classe canonique `SpecBlock` (socle s√©mantique du projet).
  - G√©rer l‚Äôartefact `bus_message.yaml` : chargement, validation, normalisation,
    persistance, et r√©instanciation contr√¥l√©e.
  - Produire un `ExecutionContext` minimal pr√™t pour PHASE_2.

Principes cl√©s (MVP local, sans effets de bord) :
  - Aucune I/O r√©seau, aucun appel LLM direct : ce module reste pur et testable.
  - Champs et casse strictement align√©s sur la table ¬´ Classe SpecBlock ¬ª du
    tiddler (pipeline fourni).
  - `source_mode` ‚àà {"manual", "dialogue"} et `llm_aid` ‚àà {True, False}.
  - `bus_message.yaml` est la source d‚Äôintention "fig√©e" (frozen intent) ;
    `SpecBlock` peut √™tre enrichi dynamiquement (annotations internes).

Compatibilit√© brownfield :
  - Lecture tol√©rante : injection de valeurs par d√©faut s√ªres.
  - G√©n√©ration d‚Äôidentifiants stables si absents (BUS-xxxx / US-xxxx).
  - Jamais d‚Äôinstallation de d√©pendances ni d‚Äôeffets syst√®me.

Sorties principales :
  - `SpecBlock`: instance valid√©e/enrichie.
  - `ExecutionContext`: conteneur l√©ger pour propager `SpecBlock` en PHASE_2.

Tests rapides conseill√©s (ex. console) :
  - sb = load_bus_message("bus_message.yaml")
  - ok, errs = validate_specblock(sb)
  - if ok: ctx = create_execution_context(sb, Path("bus_message.yaml"))

NOTE: imports internes (facultatifs ici, sans effets de bord)
from core.types import PlanLine  # potentiellement utile en phase 2
from core.error_policy import ErrorCategory  # r√©serv√© aux v√©rifications avanc√©es
===============================================================================
"""


# --------------------------------------------------------------------------- #
# Constantes de sch√©ma / garde-fous
# --------------------------------------------------------------------------- #

SCHEMA_VERSION: str = "1.0.0"
_ALLOWED_SOURCE_MODES: Tuple[str, str] = ("manual", "dialogue")


def _now_hhmm() -> str:
    """
    Renvoie la date/heure locale au format 'YYYY-MM-DD HH:MM' (sans secondes).

    Utilit√© :
        Respecter le format attendu par le champ `timestamp` du SpecBlock.
    """
    return datetime.now().strftime("%Y-%m-%d %H:%M")


def _new_bus_id() -> str:
    """
    G√©n√®re un identifiant court et stable de type 'BUS-xxxxxxxx'.

    Utilit√© :
        Assigner un `bus_message_id` si absent dans un YAML h√©rit√©/brownfield.
    """
    return f"BUS-{uuid.uuid4().hex[:8]}"


def _new_user_story_id(n: int) -> str:
    """
    G√©n√®re un identifiant de user story s√©quentiel 'US-0001', 'US-0002', etc.

    Param√®tres
    ----------
    n : int
        Index (1-based) de la story.

    Retour
    ------
    str
        Identifiant normalis√© de la forme 'US-000n'.
    """
    return f"US-{n:04d}"


# --------------------------------------------------------------------------- #
# Dataclasses : SpecBlock & ExecutionContext
# --------------------------------------------------------------------------- #

@dataclass
class SpecBlock:
    """
    Repr√©sentation formelle du bus_message, enrichissable et validable.

    Champs canoniques (align√©s avec le tiddler) :
      - bus_message_id : str (‚úÖ, auto si manquant)
      - timestamp : str 'YYYY-MM-DD HH:MM' (‚úÖ, auto si manquant)
      - title : str (‚úÖ)
      - summary : str (‚úÖ)
      - functional_objectives : list[str] (‚úÖ)
      - user_stories : list[dict] (üü°) ‚Äî ex. {"id": "US-0001", "story": "..."}
      - non_functional_constraints : list[str] (üü°)
      - target_audience : str (üü°)
      - deployment_context : str (üü°)
      - input_sources : list[str] (üîÅ)
      - output_targets : list[str] (üîÅ)
      - architectural_preferences : list[str] (üü°)
      - preferred_llm : str (üü°)
      - source_mode : Literal['manual','dialogue'] (‚úÖ)
      - llm_aid : bool (‚úÖ)
      - spec_version : str (üîÅ) ‚Äî d√©faut 'v1'
      - comment_human : str (üü°)
      - comment_llm : str (üîÅ)
      - free_field_1 : str | dict | None (üîÅ)
      - free_field_2 : str | list | None (üîÅ)

    Champs internes invisibles :
      - _schema_version : str ‚Äî suivi du sch√©ma local de SpecBlock.
    """

    # Obligatoires/primaires
    bus_message_id: str
    timestamp: str
    title: str
    summary: str
    functional_objectives: List[str]
    source_mode: Literal["manual", "dialogue"]
    llm_aid: bool

    # Optionnels (avec d√©fauts s√ªrs)
    user_stories: List[Dict[str, str]] = field(default_factory=list)
    non_functional_constraints: List[str] = field(default_factory=list)
    target_audience: Optional[str] = None
    deployment_context: Optional[str] = None
    input_sources: List[str] = field(default_factory=list)
    output_targets: List[str] = field(default_factory=list)
    architectural_preferences: List[str] = field(default_factory=list)
    preferred_llm: Optional[str] = None
    spec_version: str = "v1"
    comment_human: Optional[str] = None
    comment_llm: Optional[str] = None
    free_field_1: Optional[Any] = None
    free_field_2: Optional[Any] = None

    # Interne (non expos√© c√¥t√© utilisateur)
    _schema_version: str = SCHEMA_VERSION

    # ----------------------------- M√©thodes -------------------------------- #

    def to_yaml_dict(self) -> Dict[str, Any]:
        """
        Retourne une projection s√©rialisable YAML du SpecBlock (sans fuite interne).

        Notes :
            - `_schema_version` est conserv√© pour le suivi interne.
            - Aucune transformation destructive : les champs optionnels vides
              restent pr√©sents s‚Äôils ont un sens pour la lecture humaine.
        """
        d = asdict(self)
        # Rien √† masquer pour MVP ‚Äî conserver `_schema_version` utile en audit.
        return d

    def normalize(self) -> None:
        """
        Normalise certains champs (liste/cha√Æne, tri l√©ger, compl√©tions d‚ÄôIDs).

        R√®gles :
            - Assigne des IDs de user stories si absents.
            - D√©duplique `functional_objectives`, `input_sources`, `output_targets`.
        """
        # D√©duplication simple, ordre conserv√©
        def _dedup(seq: List[str]) -> List[str]:
            seen = set()
            out: List[str] = []
            for x in seq:
                if x not in seen:
                    seen.add(x)
                    out.append(x)
            return out

        self.functional_objectives = _dedup([s.strip() for s in self.functional_objectives if str(s).strip()])
        self.input_sources = _dedup([s.strip() for s in self.input_sources if str(s).strip()])
        self.output_targets = _dedup([s.strip() for s in self.output_targets if str(s).strip()])

        # User stories : impose la pr√©sence d'un 'id' (US-xxxx)
        normalized_us: List[Dict[str, str]] = []
        counter = 1
        for item in self.user_stories:
            story = str(item.get("story", "")).strip()
            if not story:
                continue
            uid = str(item.get("id", "")).strip()
            if not uid:
