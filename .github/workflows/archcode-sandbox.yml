name: archcode-sandbox CI

on:
  push:
    # déclenche sur branches archcode-self/*
    branches:
      - 'archcode-self/**'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: archcode-sandbox-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      PYTHONUNBUFFERED: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # si requirements.txt change, le cache sera invalidé
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (pip + pyyaml)
        # on force l'échec si l'install ne passe pas
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # installer au minimum PyYAML + outils utiles (garantie)
          pip install pyyaml ruff pytest || true

      - name: Show python & pip info
        run: |
          python --version
          pip --version
          python -c "import yaml; print('PyYAML OK', yaml.__version__)"
          pip list --format=columns

      - name: Check GH_PAT secret exists
        # Ne pas exécuter sur runs issus de fork PRs (les secrets ne sont pas disponibles)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          if [ -z "${GH_PAT}" ]; then
            echo "::warning ::Secret GH_PAT is missing or not available in this run."
            echo "If you rely on tag/remote pushes, create the GH_PAT secret in repository Settings → Secrets and variables → Actions"
            # exit non-zero si tu veux faire échouer la job quand le secret est absent, 
            # sinon laisse en warning et la suite s'exécutera
            # exit 1
          else
            echo "GH_PAT looks available (masked)."
          fi

      - name: Aggregate modules → plan_draft_aggregated.yaml (PGA)
        run: |
          # NOTE: --only-ok removed (option non reconnue). Par défaut l'agent n'agrège que les modules validés.
          python -m agents.agent_module_compilator collect \
            --reset-if-missing --update-ec

      - name: Validate plan → plan_validated.yaml (PV)
        run: |
          python -m agents.agent_plan_validator validate --update-ec

      - name: Build execution_plan.yaml
        run: |
          python -m scripts.execution_plan_transformer build

      - name: Lint (ruff) — optionnel
        continue-on-error: true
        run: |
          if command -v ruff >/dev/null 2>&1; then
            ruff check .
          else
            echo "ruff not installed — skipping lint"
          fi

      - name: Tests (pytest) — optionnel
        continue-on-error: true
        run: |
          if [ -f pytest.ini ] || [ -d tests ] || [ -f requirements.txt ]; then
            pytest -q || true
          else
            echo "No tests found — skipping pytest"
          fi

      - name: List .archcode artifacts (for debugging)
        if: always()
        run: |
          echo "ls -la .archcode || true"
          ls -la .archcode || true
          echo "show yaml heads"
          for f in .archcode/*.yaml; do
            [ -f "$f" ] || continue
            echo "---- $f ----"
            head -n 80 "$f" || true
          done

      - name: Upload .archcode artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: archcode-artifacts
          path: .archcode/*.yaml
