name: archcode-sandbox CI

on:
  push:
    # déclenche sur branches archcode-self/*
    branches:
      - 'archcode-self/**'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: archcode-sandbox-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # si requirements.txt change, le cache sera invalidé
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        # on force l'échec si l'install ne passe pas
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # installer au minimum PyYAML + outils utiles
            pip install pyyaml ruff pytest
          fi

      - name: Show python & pip info
        run: |
          python --version
          pip --version
          pip list --format=columns

      - name: Aggregate modules → plan_draft_aggregated.yaml (PGA)
        run: |
          python -m agents.agent_module_compilator collect \
            --reset-if-missing --only-ok --update-ec
        # cette étape est critique : si elle échoue, la job échoue

      - name: Validate plan → plan_validated.yaml (PV)
        run: |
          python -m agents.agent_plan_validator validate --update-ec
        # critique également

      - name: Build execution_plan.yaml
        run: |
          python -m scripts.execution_plan_transformer build
        # critique également

      - name: Lint (ruff) — optionnel
        continue-on-error: true
        run: |
          # ruff peut ne pas exister si non installé, no-op si absent
          if command -v ruff >/dev/null 2>&1; then
            ruff check .
          else
            echo "ruff not installed — skipping lint"
          fi

      - name: Tests (pytest) — optionnel
        continue-on-error: true
        run: |
          if [ -f pytest.ini ] || [ -d tests ] || [ -f requirements.txt ]; then
            pytest -q || true
          else
            echo "No tests found — skipping pytest"
          fi

      - name: List .archcode artifacts (for debugging)
        if: always()
        run: |
          echo "ls -la .archcode || true"
          ls -la .archcode || true
          echo "show yaml heads"
          for f in .archcode/*.yaml; do
            [ -f "$f" ] || continue
            echo "---- $f ----"
            head -n 80 "$f" || true
          done

      - name: Upload .archcode artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: archcode-artifacts
          path: .archcode/*.yaml
